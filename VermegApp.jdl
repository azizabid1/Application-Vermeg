application {
 config {
    applicationType monolith
    authenticationType jwt
    baseName VermegApp
    blueprints []
    buildTool maven
    cacheProvider ehcache
    clientFramework angularX
    clientPackageManager npm
    clientTheme none
    creationTimestamp 1687025065371
    databaseType sql
    devDatabaseType mysql
    dtoSuffix DTO
    enableGradleEnterprise false
    enableHibernateCache false
    enableSwaggerCodegen false
    enableTranslation true
    gradleEnterpriseHost ""
    jhiPrefix jhi
    jhipsterVersion "7.8.1"
    languages [fr]
    messageBroker false
    nativeLanguage fr
    otherModules []
    packageName com.mycompany.myapp
    prodDatabaseType mysql
    reactive false
    searchEngine false
    serverPort 8070
    serviceDiscoveryType no
    skipUserManagement false
    testFrameworks []
    websocket false
    withAdminUi true
  }

  entities Departement, Devis, Equipe, Poste, Projet, StatusEmploye, Tache, Vote
}

entity Departement {
  id Long min(4) max(6)
  nom TypeDepartement required unique
  userUuid UUID required
}
/**
 * not an ignored comment
 */
entity Devis {
  id Long
  prixTotal Double
  prixHT Double
  prixService Double
  dureeProjet Float min(0) 
  userUuid UUID required
}
entity Equipe {
  id Long
  nom String
  nombrePersonne Long min(4) max(6)
  userUuid UUID required
}
/**
 * Task entity.\n@author The JHipster team.
 */
entity Poste {
  id Long
  title String
  description String
userUuid UUID required
}
entity Projet {
  id Long
userUuid UUID required
  nomProjet String
  dateDebut LocalDate
  dateFin LocalDate
  technologies String
  statusProjet Status
  nombreTotal Long
  nombreRestant Long
}
entity StatusEmploye {
  id Long
userUuid UUID required
  disponibilite Boolean
  mission Boolean
  debutConge LocalDate
  finConge LocalDate
}
entity Tache {
  id Long
userUuid UUID required
  titre String
  description String
  statusTache Status
}
/**
 * The Employee entity.
 */
entity Vote {
  id Long
userUuid UUID required
  typeVote Rendement required unique
}
enum TypeDepartement {
  RH,
  INFORMATIQUE,
  MOA,
  FINANCE
}
enum Status {
   ATTENTE,
   COURS,
  EXECUTION,
  TERMINER
}
enum Rendement {
  FAIBLE,
  MOYEN,
  EXCELLENT
}

relationship OneToOne {
  Projet{devis(id)} to Devis 
  Projet{equipe(id)} to Equipe 
}
relationship OneToMany {
  Tache{projets} to Projet{tache}
}
relationship ManyToOne {
  Departement{userId} to User
  Equipe{userId} to User
  Poste{userId} to User
  StatusEmploye{userId} to User
}
relationship ManyToMany {
  Equipe{vote} to Vote{equipe}
}

dto Departement, Devis, Equipe, Poste, Projet, StatusEmploye, Tache, Vote with mapstruct
paginate Departement, Devis, Equipe, Poste, Projet, StatusEmploye, Tache, Vote with pagination
service Departement, Devis, Equipe, Poste, Projet, StatusEmploye, Tache, Vote with serviceImpl
filter all